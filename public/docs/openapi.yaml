openapi: 3.0.3
info:
  title: Laravel
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost'
paths:
  /api/auth/forgot-password:
    post:
      summary: 'Send a reset password link to user email'
      description: 'This endpoint allows user to reset their forgotten password.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: email
                  description: 'The email for the password reset link'
                  example: sed
              required:
                - username
  /api/auth/register:
    post:
      summary: 'Register new user/member'
      description: 'This endpoint allows to create new user account.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'User First Name'
                  example: ut
                last_name:
                  type: string
                  description: 'User Last Name'
                  example: tempora
                email:
                  type: string
                  description: 'user Email'
                  example: eos
                gender:
                  type: string
                  description: 'User Gender'
                  example: animi
                dob:
                  type: string
                  description: 'User Date of Birth'
                  example: eum
                mobile_number:
                  type: string
                  description: 'Mobile Number of User'
                  example: eos
                password:
                  type: string
                  description: 'User Password'
                  example: autem
              required:
                - first_name
                - last_name
                - email
                - gender
                - dob
                - mobile_number
                - password
  /api/auth/login:
    post:
      summary: 'Get a JWT via given credentials.'
      description: ''
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: email
                  description: 'User Email'
                  example: ea
                password:
                  type: string
                  description: 'User Password'
                  example: reprehenderit
              required:
                - username
                - password
      security: []
  '/api/auth/verify/{token}':
    get:
      summary: 'Verify Newly Created User Account'
      description: 'This endpoint provides email verification for newly created user accounts'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  error: 'Invalid login attempt'
                properties:
                  error:
                    type: string
                    example: 'Invalid login attempt'
      tags:
        - Auth
    parameters:
      -
        in: path
        name: token
        description: ''
        example: aut
        required: true
        schema:
          type: string
  /api/auth/logout:
    post:
      summary: 'Log the user out (Invalidate the token).'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
  /api/auth/refresh:
    post:
      summary: 'Refresh a token.'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
  /api/auth/me:
    get:
      summary: 'Get the authenticated User.'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Trying to get property ''id'' of non-object'
                  exception: ErrorException
                  file: 'C:\xampp\htdocs\memberz-api\app\Http\Controllers\AuthController.php'
                  line: 62
                  trace:
                    -
                      file: 'C:\xampp\htdocs\memberz-api\app\Http\Controllers\AuthController.php'
                      line: 62
                      function: handleError
                      class: Illuminate\Foundation\Bootstrap\HandleExceptions
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Controller.php'
                      line: 54
                      function: me
                      class: App\Http\Controllers\AuthController
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php'
                      line: 45
                      function: callAction
                      class: Illuminate\Routing\Controller
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php'
                      line: 254
                      function: dispatch
                      class: Illuminate\Routing\ControllerDispatcher
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php'
                      line: 197
                      function: runController
                      class: Illuminate\Routing\Route
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                      line: 695
                      function: run
                      class: Illuminate\Routing\Route
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 128
                      function: 'Illuminate\Routing\{closure}'
                      class: Illuminate\Routing\Router
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php'
                      line: 50
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Routing\Middleware\SubstituteBindings
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php'
                      line: 127
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php'
                      line: 63
                      function: handleRequest
                      class: Illuminate\Routing\Middleware\ThrottleRequests
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Routing\Middleware\ThrottleRequests
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 103
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                      line: 697
                      function: then
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                      line: 672
                      function: runRouteWithinStack
                      class: Illuminate\Routing\Router
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                      line: 636
                      function: runRoute
                      class: Illuminate\Routing\Router
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                      line: 625
                      function: dispatchToRoute
                      class: Illuminate\Routing\Router
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                      line: 166
                      function: dispatch
                      class: Illuminate\Routing\Router
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 128
                      function: 'Illuminate\Foundation\Http\{closure}'
                      class: Illuminate\Foundation\Http\Kernel
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\app\Http\Middleware\MultiTenant.php'
                      line: 42
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: App\Http\Middleware\MultiTenant
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\app\Http\Middleware\Cors.php'
                      line: 34
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: App\Http\Middleware\Cors
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php'
                      line: 21
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php'
                      line: 31
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php'
                      line: 21
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php'
                      line: 40
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\TrimStrings
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php'
                      line: 27
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\ValidatePostSize
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php'
                      line: 86
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\fideloper\proxy\src\TrustProxies.php'
                      line: 57
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 167
                      function: handle
                      class: Fideloper\Proxy\TrustProxies
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                      line: 103
                      function: 'Illuminate\Pipeline\{closure}'
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                      line: 141
                      function: then
                      class: Illuminate\Pipeline\Pipeline
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                      line: 110
                      function: sendRequestThroughRouter
                      class: Illuminate\Foundation\Http\Kernel
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                      line: 287
                      function: handle
                      class: Illuminate\Foundation\Http\Kernel
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                      line: 275
                      function: callLaravelOrLumenRoute
                      class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                      line: 86
                      function: makeApiCall
                      class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                      line: 44
                      function: makeResponseCall
                      class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                      line: 34
                      function: makeResponseCallIfConditionsPass
                      class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                      line: 225
                      function: __invoke
                      class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                      line: 182
                      function: iterateThroughStrategies
                      class: Knuckles\Scribe\Extracting\Extractor
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                      line: 116
                      function: fetchResponses
                      class: Knuckles\Scribe\Extracting\Extractor
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                      line: 118
                      function: processRoute
                      class: Knuckles\Scribe\Extracting\Extractor
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                      line: 75
                      function: extractEndpointsInfoFromLaravelApp
                      class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                      line: 51
                      function: extractEndpointsInfoAndWriteToDisk
                      class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php'
                      line: 39
                      function: get
                      class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                      line: 36
                      function: handle
                      class: Knuckles\Scribe\Commands\GenerateDocumentation
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\Util.php'
                      line: 40
                      function: 'Illuminate\Container\{closure}'
                      class: Illuminate\Container\BoundMethod
                      type: '::'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                      line: 93
                      function: unwrapIfClosure
                      class: Illuminate\Container\Util
                      type: '::'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                      line: 37
                      function: callBoundMethod
                      class: Illuminate\Container\BoundMethod
                      type: '::'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\Container.php'
                      line: 651
                      function: call
                      class: Illuminate\Container\BoundMethod
                      type: '::'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Command.php'
                      line: 136
                      function: call
                      class: Illuminate\Container\Container
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Command\Command.php'
                      line: 299
                      function: execute
                      class: Illuminate\Console\Command
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Command.php'
                      line: 121
                      function: run
                      class: Symfony\Component\Console\Command\Command
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                      line: 978
                      function: run
                      class: Illuminate\Console\Command
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                      line: 295
                      function: doRunCommand
                      class: Symfony\Component\Console\Application
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                      line: 167
                      function: doRun
                      class: Symfony\Component\Console\Application
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Application.php'
                      line: 92
                      function: run
                      class: Symfony\Component\Console\Application
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php'
                      line: 129
                      function: run
                      class: Illuminate\Console\Application
                      type: '->'
                    -
                      file: 'C:\xampp\htdocs\memberz-api\artisan'
                      line: 37
                      function: handle
                      class: Illuminate\Foundation\Console\Kernel
                      type: '->'
                properties:
                  message:
                    type: string
                    example: 'Trying to get property ''id'' of non-object'
                  exception:
                    type: string
                    example: ErrorException
                  file:
                    type: string
                    example: 'C:\xampp\htdocs\memberz-api\app\Http\Controllers\AuthController.php'
                  line:
                    type: integer
                    example: 62
                  trace:
                    type: array
                    example:
                      -
                        file: 'C:\xampp\htdocs\memberz-api\app\Http\Controllers\AuthController.php'
                        line: 62
                        function: handleError
                        class: Illuminate\Foundation\Bootstrap\HandleExceptions
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Controller.php'
                        line: 54
                        function: me
                        class: App\Http\Controllers\AuthController
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\ControllerDispatcher.php'
                        line: 45
                        function: callAction
                        class: Illuminate\Routing\Controller
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php'
                        line: 254
                        function: dispatch
                        class: Illuminate\Routing\ControllerDispatcher
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Route.php'
                        line: 197
                        function: runController
                        class: Illuminate\Routing\Route
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                        line: 695
                        function: run
                        class: Illuminate\Routing\Route
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 128
                        function: 'Illuminate\Routing\{closure}'
                        class: Illuminate\Routing\Router
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\SubstituteBindings.php'
                        line: 50
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Routing\Middleware\SubstituteBindings
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php'
                        line: 127
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Middleware\ThrottleRequests.php'
                        line: 63
                        function: handleRequest
                        class: Illuminate\Routing\Middleware\ThrottleRequests
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Routing\Middleware\ThrottleRequests
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 103
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                        line: 697
                        function: then
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                        line: 672
                        function: runRouteWithinStack
                        class: Illuminate\Routing\Router
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                        line: 636
                        function: runRoute
                        class: Illuminate\Routing\Router
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Routing\Router.php'
                        line: 625
                        function: dispatchToRoute
                        class: Illuminate\Routing\Router
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                        line: 166
                        function: dispatch
                        class: Illuminate\Routing\Router
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 128
                        function: 'Illuminate\Foundation\Http\{closure}'
                        class: Illuminate\Foundation\Http\Kernel
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\app\Http\Middleware\MultiTenant.php'
                        line: 42
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: App\Http\Middleware\MultiTenant
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\app\Http\Middleware\Cors.php'
                        line: 34
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: App\Http\Middleware\Cors
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php'
                        line: 21
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull.php'
                        line: 31
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\ConvertEmptyStringsToNull
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TransformsRequest.php'
                        line: 21
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\TrimStrings.php'
                        line: 40
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\TransformsRequest
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\TrimStrings
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\ValidatePostSize.php'
                        line: 27
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\ValidatePostSize
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance.php'
                        line: 86
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Illuminate\Foundation\Http\Middleware\PreventRequestsDuringMaintenance
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\fideloper\proxy\src\TrustProxies.php'
                        line: 57
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 167
                        function: handle
                        class: Fideloper\Proxy\TrustProxies
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Pipeline\Pipeline.php'
                        line: 103
                        function: 'Illuminate\Pipeline\{closure}'
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                        line: 141
                        function: then
                        class: Illuminate\Pipeline\Pipeline
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Http\Kernel.php'
                        line: 110
                        function: sendRequestThroughRouter
                        class: Illuminate\Foundation\Http\Kernel
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                        line: 287
                        function: handle
                        class: Illuminate\Foundation\Http\Kernel
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                        line: 275
                        function: callLaravelOrLumenRoute
                        class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                        line: 86
                        function: makeApiCall
                        class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                        line: 44
                        function: makeResponseCall
                        class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Strategies\Responses\ResponseCalls.php'
                        line: 34
                        function: makeResponseCallIfConditionsPass
                        class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                        line: 225
                        function: __invoke
                        class: Knuckles\Scribe\Extracting\Strategies\Responses\ResponseCalls
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                        line: 182
                        function: iterateThroughStrategies
                        class: Knuckles\Scribe\Extracting\Extractor
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Extracting\Extractor.php'
                        line: 116
                        function: fetchResponses
                        class: Knuckles\Scribe\Extracting\Extractor
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                        line: 118
                        function: processRoute
                        class: Knuckles\Scribe\Extracting\Extractor
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                        line: 75
                        function: extractEndpointsInfoFromLaravelApp
                        class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\GroupedEndpoints\GroupedEndpointsFromApp.php'
                        line: 51
                        function: extractEndpointsInfoAndWriteToDisk
                        class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\knuckleswtf\scribe\src\Commands\GenerateDocumentation.php'
                        line: 39
                        function: get
                        class: Knuckles\Scribe\GroupedEndpoints\GroupedEndpointsFromApp
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                        line: 36
                        function: handle
                        class: Knuckles\Scribe\Commands\GenerateDocumentation
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\Util.php'
                        line: 40
                        function: 'Illuminate\Container\{closure}'
                        class: Illuminate\Container\BoundMethod
                        type: '::'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                        line: 93
                        function: unwrapIfClosure
                        class: Illuminate\Container\Util
                        type: '::'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\BoundMethod.php'
                        line: 37
                        function: callBoundMethod
                        class: Illuminate\Container\BoundMethod
                        type: '::'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Container\Container.php'
                        line: 651
                        function: call
                        class: Illuminate\Container\BoundMethod
                        type: '::'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Command.php'
                        line: 136
                        function: call
                        class: Illuminate\Container\Container
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Command\Command.php'
                        line: 299
                        function: execute
                        class: Illuminate\Console\Command
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Command.php'
                        line: 121
                        function: run
                        class: Symfony\Component\Console\Command\Command
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                        line: 978
                        function: run
                        class: Illuminate\Console\Command
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                        line: 295
                        function: doRunCommand
                        class: Symfony\Component\Console\Application
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\symfony\console\Application.php'
                        line: 167
                        function: doRun
                        class: Symfony\Component\Console\Application
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Console\Application.php'
                        line: 92
                        function: run
                        class: Symfony\Component\Console\Application
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\vendor\laravel\framework\src\Illuminate\Foundation\Console\Kernel.php'
                        line: 129
                        function: run
                        class: Illuminate\Console\Application
                        type: '->'
                      -
                        file: 'C:\xampp\htdocs\memberz-api\artisan'
                        line: 37
                        function: handle
                        class: Illuminate\Foundation\Console\Kernel
                        type: '->'
                    items:
                      type: object
      tags:
        - Auth
  /api/banks/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
  /api/banks/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: facere
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: facere
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
  /api/banks:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Banks
  '/api/banks/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Banks
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Banks
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/batch:
    post:
      summary: 'Batch Request'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Batch Requests'
  /api/countries/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
  /api/countries/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: dicta
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: dicta
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
  /api/countries:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Countries
  '/api/countries/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Countries
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Countries
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 13
        required: true
        schema:
          type: integer
  /api/currencies/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
  /api/currencies/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quasi
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quasi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
  /api/currencies:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Currencies
  '/api/currencies/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Currencies
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Currencies
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  /api/user:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
  /api/auth/reset-password:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'User email'
                  example: modi
                token:
                  type: string
                  description: 'Password Reset Token'
                  example: et
                password:
                  type: string
                  description: 'New User Password'
                  example: qui
              required:
                - username
                - token
                - password
  /api/system/database/migrate:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/system/database/rollback:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/system/database/seed:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/system/cache/routes:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/system/cache/config:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/system/cache/clear:
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  /api/organisation_member_imports/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
  /api/organisation_member_imports/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: mollitia
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: mollitia
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
  /api/organisation_member_imports:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Endpoints
  '/api/organisation_member_imports/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Endpoints
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Endpoints
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Endpoints
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 5
        required: true
        schema:
          type: integer
  /:
    get:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Endpoints
  '/api/member_accounts/{id}/organisations':
    get:
      summary: 'Get Organisations'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            text/plain:
              schema:
                type: string
                example: '{"error" => "Member Account Not Found"}'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. ID of member account.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 1
  /api/member_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
  /api/member_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: aspernatur
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: aspernatur
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
  /api/member_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Accounts'
  '/api/member_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Accounts'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  /api/members/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
  /api/members/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: voluptatem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: voluptatem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
  /api/members:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Profiles'
  '/api/members/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Profiles'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Profiles'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  /api/organisation_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
  /api/organisation_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: perferendis
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: perferendis
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
  /api/organisation_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
    post:
      summary: 'Create Account'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Accounts'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 7.59221719
                member_id:
                  type: number
                  description: 'This field is required when <code>member_account_id</code> is not present.'
                  example: !!float 1
                member_account_id:
                  type: number
                  description: 'This field is required when <code>member_id</code> is not present.'
                  example: 31016.4683596
                organisation_role_id:
                  type: number
                  description: ''
                  example: 3.6176
              required:
                - organisation_id
                - organisation_role_id
  '/api/organisation_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
    put:
      summary: 'Update Account'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Accounts'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 827.531605
                member_id:
                  type: number
                  description: 'This field is required when <code>member_account_id</code> is not present.'
                  example: 3543601.7
                member_account_id:
                  type: number
                  description: 'This field is required when <code>member_id</code> is not present.'
                  example: 6.54063865
                organisation_role_id:
                  type: number
                  description: ''
                  example: !!float 11137067
              required:
                - organisation_id
                - organisation_role_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/organisation_file_imports/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
  /api/organisation_file_imports/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: eum
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: eum
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
  /api/organisation_file_imports:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
    post:
      summary: 'Import File'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation File Imports'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 4853752.795
                import_to_id:
                  type: number
                  description: ''
                  example: 1009660.1168258
                import_type:
                  type: string
                  description: 'Must be one of <code>members</code> or <code>contributions</code>.'
                  example: contributions
                import_file:
                  type: string
                  format: binary
                  description: 'Must be a file.'
              required:
                - organisation_id
                - import_to_id
                - import_type
                - import_file
  '/api/organisation_file_imports/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
    put:
      summary: 'Update Import'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation File Imports'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation File Imports'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 18
        required: true
        schema:
          type: integer
  /api/organisation_group_leaders/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
  /api/organisation_group_leaders/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: commodi
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: commodi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
  /api/organisation_group_leaders:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Leaders'
  '/api/organisation_group_leaders/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Leaders'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Group Leaders'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 9
        required: true
        schema:
          type: integer
  /api/organisation_group_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
  /api/organisation_group_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: maxime
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: maxime
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
  /api/organisation_group_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Types'
  '/api/organisation_group_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Group Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  /api/organisation_groups/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
  /api/organisation_groups/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: voluptatem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: voluptatem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
  /api/organisation_groups:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
    post:
      summary: 'Create Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: 'The group type of this group record.'
                  example: !!float 1
                organisation_group_type_id:
                  type: number
                  description: ''
                  example: 11598.6490152
                name:
                  type: string
                  description: ''
                  example: explicabo
                active:
                  type: string
                  description: ''
                  example: null
              required:
                - organisation_type_id
                - organisation_group_type_id
                - name
  '/api/organisation_groups/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
    put:
      summary: 'Update Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: 'The group type of this group record.'
                  example: !!float 1
                organisation_group_type_id:
                  type: number
                  description: ''
                  example: 4.37
                name:
                  type: string
                  description: ''
                  example: eos
                active:
                  type: string
                  description: ''
                  example: null
              required:
                - organisation_type_id
                - organisation_group_type_id
                - name
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Groups'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/organisation_invoice_items/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
  /api/organisation_invoice_items/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: iure
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: iure
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
  /api/organisation_invoice_items:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Items'
  '/api/organisation_invoice_items/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Items'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoice Items'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 20
        required: true
        schema:
          type: integer
  /api/organisation_invoice_payments/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
  /api/organisation_invoice_payments/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: incidunt
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: incidunt
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
  /api/organisation_invoice_payments:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Payments'
  '/api/organisation_invoice_payments/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Payments'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoice Payments'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 2
        required: true
        schema:
          type: integer
  /api/organisation_invoices/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
  /api/organisation_invoices/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: optio
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: optio
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
  /api/organisation_invoices:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoices'
  '/api/organisation_invoices/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoices'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoices'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 14
        required: true
        schema:
          type: integer
  /api/organisation_member_categories/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
  /api/organisation_member_categories/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: nisi
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: nisi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
  /api/organisation_member_categories:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
    post:
      summary: 'Create Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Member Categories'
  '/api/organisation_member_categories/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
    put:
      summary: 'Update Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Member Categories'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Member Categories'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 12
        required: true
        schema:
          type: integer
  '/api/organisations/{id}/memberships/statistics':
    get:
      summary: 'Basic Statistics'
      description: 'Returns a basic set of statistics about memberships'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation.'
        example: 8
        required: true
        schema:
          type: integer
  /api/organisation_members/unapproved:
    get:
      summary: 'Unapproved Registrations'
      description: 'Returns a list of unapproved registrations'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quia
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quia
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Members'
  '/api/organisation_members/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Members'
    delete:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Members'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 8
        required: true
        schema:
          type: integer
  '/api/organisation_roles/{id}/permissions':
    get:
      summary: 'Get Permissions'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    post:
      summary: 'Sync Permissions'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Roles'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. ID of role to retrieve permissions for.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 1
  /api/organisation_roles/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
  /api/organisation_roles/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: sunt
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: sunt
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
  /api/organisation_roles:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Roles'
  '/api/organisation_roles/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Roles'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Roles'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 13
        required: true
        schema:
          type: integer
  /api/organisation_setting_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
  /api/organisation_setting_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: temporibus
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: temporibus
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
  /api/organisation_setting_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Setting Types'
  '/api/organisation_setting_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Setting Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Setting Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/organisation_settings/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
  /api/organisation_settings/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: autem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: autem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
  /api/organisation_settings:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Settings'
  '/api/organisation_settings/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Settings'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Settings'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 19
        required: true
        schema:
          type: integer
  '/api/organisation_subscriptions/{id}/renew':
    post:
      summary: "Pass the current subscription to be renewed\nPass the renewal length"
      description: "Auto determine organisation_id\nAuto determine current subscription_type\n\nActions: create an invoice for the transaction, return new subscription with invoice"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Subscrptions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 87.5588105
                length:
                  type: number
                  description: ''
                  example: 189778.8674521
              required:
                - organisation_id
                - length
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation subscription.'
        example: odio
        required: true
        schema:
          type: string
  '/api/organisation_subscriptions/{id}/upgrade':
    post:
      summary: "Pass the current subscription to be upgraded\nPass the new subscription_type to upgrade to\nPass the subscription length"
      description: "Auto determine organisation_id\n\nActions: create an invoice for the transaction, insert new subscription with invoice info"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Subscrptions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 0.1
                subscription_type_id:
                  type: number
                  description: ''
                  example: 21438.680874882
                length:
                  type: number
                  description: ''
                  example: 233131.397
              required:
                - organisation_id
                - subscription_type_id
                - length
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation subscription.'
        example: corrupti
        required: true
        schema:
          type: string
  /api/organisation_subscriptions/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
  /api/organisation_subscriptions/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quis
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quis
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
  /api/organisation_subscriptions:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Subscrptions'
  '/api/organisation_subscriptions/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Subscrptions'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Subscrptions'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 15
        required: true
        schema:
          type: integer
  /api/organisation_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
  /api/organisation_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: est
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: est
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
  /api/organisation_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Types'
  '/api/organisation_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 4
        required: true
        schema:
          type: integer
  /api/organisations/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
  /api/organisations/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: cumque
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: cumque
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
  /api/organisations:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
    post:
      summary: 'Create Organisation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Organisations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: ''
                  example: 93.278739038
                name:
                  type: string
                  description: ''
                  example: voluptas
                slug:
                  type: string
                  description: ''
                  example: earum
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: treva.cormier@example.org
                phone:
                  type: string
                  description: ''
                  example: et
                website:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://hodkiewicz.org/ea-ipsam-accusamus-quisquam-ducimus-ad-odio-dolor.html'
                country_id:
                  type: number
                  description: ''
                  example: 36154406.526114
                currency_id:
                  type: number
                  description: ''
                  example: 3.33
                logo:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'https://barton.com/quia-aliquid-quia-id.html'
                address:
                  type: string
                  description: ''
                  example: corrupti
                city:
                  type: string
                  description: ''
                  example: dolores
                state:
                  type: string
                  description: ''
                  example: occaecati
                post_code:
                  type: string
                  description: ''
                  example: nisi
                short_description:
                  type: string
                  description: ''
                  example: fugiat
                long_description:
                  type: string
                  description: ''
                  example: accusantium
                subscription_type_id:
                  type: number
                  description: ''
                  example: !!float 0
                subscription_length:
                  type: number
                  description: ''
                  example: 382395.8726
              required:
                - organisation_type_id
                - name
                - email
                - phone
                - country_id
                - subscription_type_id
                - subscription_length
  '/api/organisations/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
    put:
      summary: 'Update Organisation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses: {  }
      tags:
        - Organisations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: ''
                  example: 6659717.6117262
                name:
                  type: string
                  description: ''
                  example: aliquid
                slug:
                  type: string
                  description: ''
                  example: ut
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: king54@example.org
                phone:
                  type: string
                  description: ''
                  example: beatae
                website:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://www.bernhard.biz/porro-voluptatum-sed-voluptatem-aliquam-vero-expedita-explicabo.html'
                country_id:
                  type: number
                  description: ''
                  example: 5358566.72
                currency_id:
                  type: number
                  description: ''
                  example: 4.10338052
                logo:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://www.gutmann.info/rem-laudantium-omnis-perferendis-dolorem-pariatur-accusantium-mollitia'
                address:
                  type: string
                  description: ''
                  example: alias
                city:
                  type: string
                  description: ''
                  example: dolor
                state:
                  type: string
                  description: ''
                  example: eligendi
                post_code:
                  type: string
                  description: ''
                  example: quidem
                short_description:
                  type: string
                  description: ''
                  example: similique
                long_description:
                  type: string
                  description: ''
                  example: pariatur
              required:
                - organisation_type_id
                - name
                - email
                - phone
                - country_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Organisations
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 17
        required: true
        schema:
          type: integer
  /api/permissions/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
  /api/permissions/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: sit
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: sit
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
  /api/permissions:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Permissions
  '/api/permissions/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Permissions
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Permissions
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 7
        required: true
        schema:
          type: integer
  /api/sms_account_messages/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
  /api/sms_account_messages/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quis
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quis
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
  /api/sms_account_messages:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Messages'
  '/api/sms_account_messages/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Messages'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Account Messages'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/sms_account_topups/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
  /api/sms_account_topups/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: error
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: error
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
  /api/sms_account_topups:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Topups'
  '/api/sms_account_topups/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Topups'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Account Topups'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/sms_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
  /api/sms_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: voluptatibus
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: voluptatibus
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
  /api/sms_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Accounts'
  '/api/sms_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Accounts'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 20
        required: true
        schema:
          type: integer
  /api/sms_broadcasts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
  /api/sms_broadcasts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: fugit
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: fugit
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
  /api/sms_broadcasts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast'
  '/api/sms_broadcasts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Broadcast'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/sms_broadcast_lists/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
  /api/sms_broadcast_lists/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: repellendus
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: repellendus
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
  /api/sms_broadcast_lists:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast Lists'
  '/api/sms_broadcast_lists/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast Lists'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Broadcast Lists'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 1
        required: true
        schema:
          type: integer
  /api/sms_credits/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
  /api/sms_credits/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: ratione
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: ratione
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
  /api/sms_credits:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Credits'
  '/api/sms_credits/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Credits'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Credits'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 19
        required: true
        schema:
          type: integer
  /api/subscription_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
  /api/subscription_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: maiores
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: maiores
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
  /api/subscription_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Subscription Types'
  '/api/subscription_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Subscription Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Subscription Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  /api/system_setting_category/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
  /api/system_setting_category/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: non
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: non
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
  /api/system_setting_category:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Setting Categories'
  '/api/system_setting_category/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Setting Categories'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'System Setting Categories'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 13
        required: true
        schema:
          type: integer
  /api/system_settings/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
  /api/system_settings/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: deserunt
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: deserunt
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
  /api/system_settings:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Settings'
  '/api/system_settings/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Settings'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'System Settings'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  /api/transaction_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
  /api/transaction_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: asperiores
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: asperiores
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
  /api/transaction_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Transaction Types'
  '/api/transaction_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        400:
          description: '400'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: '500'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Transaction Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: '200'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: '404'
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Transaction Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 18
        required: true
        schema:
          type: integer
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
