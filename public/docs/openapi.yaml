openapi: 3.0.3
info:
  title: 'Memberz.Org API'
  description: ''
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/activity_logs/search:
    get:
      summary: 'Get All'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Activity Logs'
  /api/activity_logs/log_groups:
    get:
      summary: 'Get Log Groups'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Activity Logs'
  /api/auth/reset-password:
    post:
      summary: 'Reset Password'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Password reset successful'
                properties:
                  message:
                    type: string
                    example: 'Password reset successful'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Error resetting password'
                properties:
                  message:
                    type: string
                    example: 'Error resetting password'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: 'User email.'
                  example: john@mail.com
                token:
                  type: string
                  description: 'Password Reset Token.'
                  example: '123010100101'
                password:
                  type: string
                  description: 'New User Password.'
                  example: mypassword02
              required:
                - username
                - token
                - password
  /api/auth/login:
    post:
      summary: Login
      description: 'Get a JWT via given credentials.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: email
                  description: 'User Email.'
                  example: john@mail.com
                password:
                  type: string
                  description: 'User Password.'
                  example: mypassword01
              required:
                - username
                - password
      security: []
  /api/auth/logout:
    post:
      summary: Logout
      description: 'Log the user out (Invalidate the token).'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
  /api/auth/refresh:
    post:
      summary: 'Refresh a token.'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
  /api/auth/me:
    get:
      summary: 'User Profile'
      description: 'Get the authenticated User.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated
                properties:
                  message:
                    type: string
                    example: Unauthenticated
      tags:
        - Auth
  /api/auth/forgot-password:
    post:
      summary: 'Forgot Password'
      description: 'Send a reset password link to user email. This endpoint allows user to reset their forgotten password.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: email
                  description: 'The email for the password reset link.'
                  example: john@mail.com
              required:
                - username
  /api/auth/register:
    post:
      summary: 'Register new user/member'
      description: 'This endpoint allows to create new user account.'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Successfully created account'
                properties:
                  message:
                    type: string
                    example: 'Successfully created account'
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                  description: 'User First Name.'
                  example: John
                last_name:
                  type: string
                  description: 'User Last Name.'
                  example: Ansah
                email:
                  type: string
                  description: 'user Email.'
                  example: john.ansah@mail.com
                gender:
                  type: string
                  description: 'User Gender.'
                  example: male
                dob:
                  type: string
                  description: 'User Date of Birth.'
                  example: '1980-01-03'
                mobile_number:
                  type: string
                  description: 'Mobile Number of User.'
                  example: '+2332440000001'
                password:
                  type: string
                  description: 'User Password.'
                  example: mypassword01
              required:
                - first_name
                - last_name
                - email
                - gender
                - dob
                - mobile_number
                - password
  '/api/auth/verify/{token}':
    get:
      summary: 'Verify Account'
      description: "Verify Newly Created User Account\n\nThis endpoint provides email verification for newly created user accounts"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Invalid login attempt'
                properties:
                  message:
                    type: string
                    example: 'Invalid login attempt'
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: 'Account creation verification successful'
                properties:
                  message:
                    type: string
                    example: 'Account creation verification successful'
      tags:
        - Auth
    parameters:
      -
        in: path
        name: token
        description: ''
        example: a
        required: true
        schema:
          type: string
  /api/banks/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
  /api/banks/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: itaque
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: itaque
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
  /api/banks:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Banks
  '/api/banks/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Banks
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Banks
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Banks
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 5
        required: true
        schema:
          type: integer
  /api/batch:
    post:
      summary: 'Batch Request'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Batch Requests'
  /api/contribution_receipt_settings/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipt Settings'
  /api/contribution_receipt_settings/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: cumque
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: cumque
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipt Settings'
  /api/contribution_receipt_settings:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipt Settings'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Receipt Settings'
  '/api/contribution_receipt_settings/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipt Settings'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Receipt Settings'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Contribution Receipt Settings'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 9
        required: true
        schema:
          type: integer
  /api/contribution_receipts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipts'
  /api/contribution_receipts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: eos
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: eos
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipts'
  /api/contribution_receipts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipts'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Receipts'
  '/api/contribution_receipts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Receipts'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Receipts'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Contribution Receipts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  /api/contribution_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Types'
  /api/contribution_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: necessitatibus
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: necessitatibus
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Types'
  /api/contribution_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Types'
  '/api/contribution_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Contribution Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Contribution Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Contribution Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 7
        required: true
        schema:
          type: integer
  /api/contributions/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Contributions
  /api/contributions/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: suscipit
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: suscipit
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Contributions
  /api/contributions:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Contributions
    post:
      summary: 'Create Contribution'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Contributions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: numeric
                  description: 'Organisation id'
                  example: est
                organisation_member_id:
                  type: numeric
                  description: 'Organisation Member id'
                  example: repellat
                module_contribution_type_id:
                  type: numeric
                  description: 'Module contribution type id'
                  example: et
                module_contribution_receipt_id:
                  type: numeric
                  description: 'Module contribution receipt id'
                  example: inventore
                module_contribution_payment_type_id:
                  type: numeric
                  description: 'Module contribution payment type id'
                  example: praesentium
                bank_id:
                  type: numeric
                  description: 'Bank id'
                  example: quis
                currency_id:
                  type: numeric
                  description: 'Currency id'
                  example: earum
                organisation_file_import_id:
                  type: numeric
                  description: 'Organisation file import id'
                  example: inventore
                description:
                  type: string
                  description: Description
                  example: ducimus
                week:
                  type: numeric
                  description: Week
                  example: illum
                month:
                  type: numeric
                  description: month
                  example: molestias
                year:
                  type: numeric
                  description: year
                  example: laudantium
                cheque_status:
                  type: enum
                  description: '''Cleared|Not Cleared'''
                  example: totam
                cheque_number:
                  type: string
                  description: 'Cheque Number'
                  example: voluptatem
                amount:
                  type: numeric
                  description: Amount
                  example: facilis
                receipt_no:
                  type: string
                  description: 'Receipt no'
                  example: odio
                receipt_dt:
                  type: date
                  description: 'Receipt date'
                  example: iste
                active:
                  type: boolean
                  description: Active
                  example: true
              required:
                - receipt_no
                - receipt_dt
  '/api/contributions/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Contributions
    put:
      summary: 'Update Contribution'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Contributions
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Contributions
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/countries/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
  /api/countries/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: eos
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: eos
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
  /api/countries:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Countries
  '/api/countries/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Countries
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Countries
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Countries
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 7
        required: true
        schema:
          type: integer
  /api/currencies/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
  /api/currencies/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: autem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: autem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
  /api/currencies:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Currencies
  '/api/currencies/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Currencies
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Currencies
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Currencies
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 7
        required: true
        schema:
          type: integer
  '/api/member_accounts/{id}/organisations':
    get:
      summary: 'Get Organisations'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: '{"error" => "Member Account Not Found"}'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'Optional parameter. ID of member account.'
        required: true
        schema:
          type: integer
        examples:
          omitted:
            summary: 'When the value is omitted'
            value: ''
          present:
            summary: 'When the value is present'
            value: 1
  /api/member_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
  /api/member_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: aspernatur
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: aspernatur
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
  /api/member_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Accounts'
  '/api/member_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Accounts'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Accounts'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 3
        required: true
        schema:
          type: integer
  /api/member_images/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Images'
  /api/member_images/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: molestiae
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: molestiae
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Images'
  /api/member_images:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Images'
    post:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Member Images'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_id:
                  type: number
                  description: ''
                  example: 7669.4580856
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 5000 kilobytes.'
                image_base64:
                  type: string
                  description: ''
                  example: voluptate
              required:
                - member_id
                - image
                - image_base64
  '/api/member_images/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Images'
    put:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Member Images'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_id:
                  type: number
                  description: ''
                  example: 507776.0
                image:
                  type: string
                  format: binary
                  description: 'Must be a file. Must not be greater than 5000 kilobytes.'
                image_base64:
                  type: string
                  description: ''
                  example: est
              required:
                - member_id
                - image
                - image_base64
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Images'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 18
        required: true
        schema:
          type: integer
  /api/members/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: molestiae
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: molestiae
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
  /api/members/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
  /api/members:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Profiles'
  '/api/members/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Profiles'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Profiles'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Profiles'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 4
        required: true
        schema:
          type: integer
  /api/member_relation_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relation Types'
  /api/member_relation_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: corrupti
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: corrupti
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relation Types'
  /api/member_relation_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relation Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Relation Types'
  '/api/member_relation_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relation Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Member Relation Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Relation Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 4
        required: true
        schema:
          type: integer
  /api/member_relations/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relations'
  /api/member_relations/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: ut
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: ut
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relations'
  /api/member_relations:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relations'
    post:
      summary: 'Create Member Relation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    member_id: 1
                    name: 'Isaac Aubin'
                    gender: male
                    dob: null
                    is_alive: 1
                    relation_member_id: null
                    member_relation_type_id: 2
                    active: 1
                    created_at: '2021-08-19T01:19:39.000000Z'
                    updated_at: '2021-08-19T01:19:39.000000Z'
                    relative: null
                    member_relation_type:
                      id: 2
                      name: Parent
                      created_at: null
                      updated_at: null
                properties:
                  data:
                    type: object
                    example:
                      id: 1
                      member_id: 1
                      name: 'Isaac Aubin'
                      gender: male
                      dob: null
                      is_alive: 1
                      relation_member_id: null
                      member_relation_type_id: 2
                      active: 1
                      created_at: '2021-08-19T01:19:39.000000Z'
                      updated_at: '2021-08-19T01:19:39.000000Z'
                      relative: null
                      member_relation_type:
                        id: 2
                        name: Parent
                        created_at: null
                        updated_at: null
      tags:
        - 'Member Relations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_id:
                  type: number
                  description: 'Id of member.'
                  example: 1.0
                name:
                  type: string
                  description: 'Name of member relation.'
                  example: 'Joseph Ansah'
                gender:
                  type: string
                  description: 'Gender of member relation.'
                  example: Male
                dob:
                  type: string
                  description: 'Date of birth of member relation.'
                  example: '1990-01-04'
                is_alive:
                  type: boolean
                  description: 'Member relation alive or dead.'
                  example: true
                active:
                  type: boolean
                  description: 'Member relation active or inactive.'
                  example: true
                member_relation_type_id:
                  type: number
                  description: 'Id of member relation type.'
                  example: 1.0
                relation_member_id:
                  type: number
                  description: 'Linked to member id of members table.'
                  example: 1.0
              required:
                - member_id
                - name
                - gender
                - dob
                - member_relation_type_id
  '/api/member_relations/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Member Relations'
    put:
      summary: 'Update Member Relation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    member_id: 1
                    name: 'Isaac Aubin'
                    gender: male
                    dob: null
                    is_alive: 1
                    relation_member_id: null
                    member_relation_type_id: 2
                    active: 1
                    created_at: '2021-08-19T01:19:39.000000Z'
                    updated_at: '2021-08-19T01:19:39.000000Z'
                    relative: null
                    member_relation_type:
                      id: 2
                      name: Parent
                      created_at: null
                      updated_at: null
                properties:
                  data:
                    type: object
                    example:
                      id: 1
                      member_id: 1
                      name: 'Isaac Aubin'
                      gender: male
                      dob: null
                      is_alive: 1
                      relation_member_id: null
                      member_relation_type_id: 2
                      active: 1
                      created_at: '2021-08-19T01:19:39.000000Z'
                      updated_at: '2021-08-19T01:19:39.000000Z'
                      relative: null
                      member_relation_type:
                        id: 2
                        name: Parent
                        created_at: null
                        updated_at: null
      tags:
        - 'Member Relations'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_id:
                  type: number
                  description: 'Id of member.'
                  example: 1.0
                name:
                  type: string
                  description: 'Name of member relation.'
                  example: 'Joseph Ansah'
                gender:
                  type: string
                  description: 'Gender of member relation.'
                  example: Male
                dob:
                  type: string
                  description: 'Date of birth of member relation.'
                  example: '1990-01-04'
                is_alive:
                  type: boolean
                  description: 'Member relation alive or dead.'
                  example: true
                active:
                  type: boolean
                  description: 'Member relation active or inactive.'
                  example: true
                member_relation_type_id:
                  type: number
                  description: 'Id of member relation type.'
                  example: 1.0
                relation_member_id:
                  type: number
                  description: 'Linked to member id of members table.'
                  example: 1.0
              required:
                - member_id
                - name
                - gender
                - dob
                - member_relation_type_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Member Relations'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  '/api/notifications/{id}/mark_read':
    post:
      summary: 'Mark As Read'
      description: 'Mark a specific notification as read'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Notifications
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the notification.'
        example: 9
        required: true
        schema:
          type: integer
  /api/notifications/mark_all_read:
    post:
      summary: 'Mark All Read'
      description: 'Mark all unread notifications as read'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Notifications
  /api/notifications/unread:
    get:
      summary: 'Get Unread'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Notifications
  /api/notifications:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Notifications
  '/api/notifications/subscribe/{member_id}':
    get:
      summary: 'Subscribe To Notifications'
      description: "Subscribe to Server Sent Events (SSEs) for real time notification of new notification\nmessages that come through for the logged in user"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: ''
      tags:
        - Notifications
    parameters:
      -
        in: path
        name: member_id
        description: 'The ID of the member.'
        example: reiciendis
        required: true
        schema:
          type: string
  /api/organisation_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
  /api/organisation_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: numquam
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: numquam
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
  /api/organisation_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
    post:
      summary: 'Create Account'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Accounts'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 7856061.9
                member_id:
                  type: number
                  description: 'This field is required when <code>member_account_id</code> is not present.'
                  example: 5714656.0
                member_account_id:
                  type: number
                  description: 'This field is required when <code>member_id</code> is not present.'
                  example: 52.6
                organisation_role_id:
                  type: number
                  description: ''
                  example: 3170931.0
              required:
                - organisation_id
                - organisation_role_id
  '/api/organisation_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Accounts'
    put:
      summary: 'Update Account'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Accounts'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 4515.31
                member_id:
                  type: number
                  description: 'This field is required when <code>member_account_id</code> is not present.'
                  example: 20805791.650792
                member_account_id:
                  type: number
                  description: 'This field is required when <code>member_id</code> is not present.'
                  example: 378711881.47026
                organisation_role_id:
                  type: number
                  description: ''
                  example: 1.8
              required:
                - organisation_id
                - organisation_role_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 15
        required: true
        schema:
          type: integer
  /api/organisation_file_imports/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
  /api/organisation_file_imports/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: at
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: at
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
  /api/organisation_file_imports:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
    post:
      summary: 'Import File'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation File Imports'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 1.0
                import_to_id:
                  type: number
                  description: ''
                  example: 1755514.3871347
                import_type:
                  type: string
                  description: 'Must be one of <code>members</code> or <code>contributions</code>.'
                  example: contributions
                import_file:
                  type: string
                  format: binary
                  description: 'Must be a file.'
              required:
                - organisation_id
                - import_to_id
                - import_type
                - import_file
  '/api/organisation_file_imports/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation File Imports'
    put:
      summary: 'Update Import'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation File Imports'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation File Imports'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 18
        required: true
        schema:
          type: integer
  /api/organisation_group_leaders/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
  /api/organisation_group_leaders/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: dolore
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: dolore
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
  /api/organisation_group_leaders:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Leaders'
  '/api/organisation_group_leaders/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Leaders'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Leaders'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Group Leaders'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 12
        required: true
        schema:
          type: integer
  /api/organisation_group_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
  /api/organisation_group_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: animi
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: animi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
  /api/organisation_group_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Types'
  '/api/organisation_group_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Group Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Group Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Group Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 19
        required: true
        schema:
          type: integer
  /api/organisation_groups/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
  /api/organisation_groups/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: et
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: et
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
  /api/organisation_groups:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
    post:
      summary: 'Create Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: 'The group type of this group record.'
                  example: 1.0
                organisation_group_type_id:
                  type: number
                  description: ''
                  example: 91179205.0
                name:
                  type: string
                  description: ''
                  example: quia
                active:
                  type: string
                  description: ''
                  example: null
              required:
                - organisation_type_id
                - organisation_group_type_id
                - name
  '/api/organisation_groups/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Groups'
    put:
      summary: 'Update Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: 'The group type of this group record.'
                  example: 1.0
                organisation_group_type_id:
                  type: number
                  description: ''
                  example: 31272.286
                name:
                  type: string
                  description: ''
                  example: dolorem
                active:
                  type: string
                  description: ''
                  example: null
              required:
                - organisation_type_id
                - organisation_group_type_id
                - name
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Groups'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 3
        required: true
        schema:
          type: integer
  /api/organisation_invoice_items/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
  /api/organisation_invoice_items/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: amet
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: amet
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
  /api/organisation_invoice_items:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Items'
  '/api/organisation_invoice_items/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Items'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Items'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoice Items'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/organisation_invoice_payments/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
  /api/organisation_invoice_payments/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: consectetur
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: consectetur
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
  /api/organisation_invoice_payments:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Payments'
  '/api/organisation_invoice_payments/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoice Payments'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoice Payments'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoice Payments'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/organisation_invoices/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
  /api/organisation_invoices/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: optio
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: optio
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
  /api/organisation_invoices:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoices'
  '/api/organisation_invoices/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Invoices'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Invoices'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Invoices'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 12
        required: true
        schema:
          type: integer
  /api/organisation_member_categories/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
  /api/organisation_member_categories/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: in
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: in
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
  /api/organisation_member_categories:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
    post:
      summary: 'Create Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Member Categories'
  '/api/organisation_member_categories/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Categories'
    put:
      summary: 'Update Group'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Member Categories'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Member Categories'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 12
        required: true
        schema:
          type: integer
  /api/organisation_member_groups/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Groups'
  /api/organisation_member_groups/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quidem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quidem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Groups'
  /api/organisation_member_groups:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Groups'
    post:
      summary: 'Create Association'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    organisation_id: 44
                    organisation_member_id: 856
                    organisation_group_id: 2
                    created: '2014-04-29T12:48:16.000000Z'
                    modified: '2014-04-29T12:48:16.000000Z'
                    active: true
                    organisation_member:
                      id: 856
                      organisation_id: 44
                      member_id: 1
                      organisation_no: ''
                      organisation_member_category_id: 13
                      status: member
                      source: admin
                      membership_start_dt: null
                      membership_end_dt: null
                      last_renewal_dt: null
                      created: '2014-04-29T00:38:35.000000Z'
                      modified: '2014-04-29T00:38:35.000000Z'
                      approved: 1
                      approved_by: 52
                      active: true
                    organisation_group:
                      id: 2
                      organisation_id: 44
                      organisation_group_type_id: 1
                      name: 'Youth Ministry'
                      organisation_member_group_count: 243
                      created: '2014-04-08T13:57:41.000000Z'
                      modified: '2020-05-04T10:58:19.000000Z'
                      active: true
                      organisation_group_type:
                        id: 1
                        organisation_id: 44
                        name: Auxiliary
                        description: ''
                        show_on_reg_forms: 1
                        allow_multi_select: 0
                        created: '-000001-11-30T00:00:00.000000Z'
                        modified: '2016-07-12T18:24:59.000000Z'
                        active: true
                properties:
                  data:
                    type: object
                    example:
                      id: 1
                      organisation_id: 44
                      organisation_member_id: 856
                      organisation_group_id: 2
                      created: '2014-04-29T12:48:16.000000Z'
                      modified: '2014-04-29T12:48:16.000000Z'
                      active: true
                      organisation_member:
                        id: 856
                        organisation_id: 44
                        member_id: 1
                        organisation_no: ''
                        organisation_member_category_id: 13
                        status: member
                        source: admin
                        membership_start_dt: null
                        membership_end_dt: null
                        last_renewal_dt: null
                        created: '2014-04-29T00:38:35.000000Z'
                        modified: '2014-04-29T00:38:35.000000Z'
                        approved: 1
                        approved_by: 52
                        active: true
                      organisation_group:
                        id: 2
                        organisation_id: 44
                        organisation_group_type_id: 1
                        name: 'Youth Ministry'
                        organisation_member_group_count: 243
                        created: '2014-04-08T13:57:41.000000Z'
                        modified: '2020-05-04T10:58:19.000000Z'
                        active: true
                        organisation_group_type:
                          id: 1
                          organisation_id: 44
                          name: Auxiliary
                          description: ''
                          show_on_reg_forms: 1
                          allow_multi_select: 0
                          created: '-000001-11-30T00:00:00.000000Z'
                          modified: '2016-07-12T18:24:59.000000Z'
                          active: true
      tags:
        - 'Organisation Member Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: 'Organisation this record belongs to.'
                  example: 1.0
                organisation_member_id:
                  type: number
                  description: 'Membership this record belongs to.'
                  example: 1.0
                organisation_group_id:
                  type: number
                  description: 'Group this record belongs to.'
                  example: 1.0
              required:
                - organisation_id
                - organisation_member_id
                - organisation_group_id
  '/api/organisation_member_groups/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Groups'
    put:
      summary: 'Update Association'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  data:
                    id: 1
                    organisation_id: 44
                    organisation_member_id: 856
                    organisation_group_id: 2
                    created: '2014-04-29T12:48:16.000000Z'
                    modified: '2014-04-29T12:48:16.000000Z'
                    active: true
                    organisation_member:
                      id: 856
                      organisation_id: 44
                      member_id: 1
                      organisation_no: ''
                      organisation_member_category_id: 13
                      status: member
                      source: admin
                      membership_start_dt: null
                      membership_end_dt: null
                      last_renewal_dt: null
                      created: '2014-04-29T00:38:35.000000Z'
                      modified: '2014-04-29T00:38:35.000000Z'
                      approved: 1
                      approved_by: 52
                      active: true
                    organisation_group:
                      id: 2
                      organisation_id: 44
                      organisation_group_type_id: 1
                      name: 'Youth Ministry'
                      organisation_member_group_count: 243
                      created: '2014-04-08T13:57:41.000000Z'
                      modified: '2020-05-04T10:58:19.000000Z'
                      active: true
                      organisation_group_type:
                        id: 1
                        organisation_id: 44
                        name: Auxiliary
                        description: ''
                        show_on_reg_forms: 1
                        allow_multi_select: 0
                        created: '-000001-11-30T00:00:00.000000Z'
                        modified: '2016-07-12T18:24:59.000000Z'
                        active: true
                properties:
                  data:
                    type: object
                    example:
                      id: 1
                      organisation_id: 44
                      organisation_member_id: 856
                      organisation_group_id: 2
                      created: '2014-04-29T12:48:16.000000Z'
                      modified: '2014-04-29T12:48:16.000000Z'
                      active: true
                      organisation_member:
                        id: 856
                        organisation_id: 44
                        member_id: 1
                        organisation_no: ''
                        organisation_member_category_id: 13
                        status: member
                        source: admin
                        membership_start_dt: null
                        membership_end_dt: null
                        last_renewal_dt: null
                        created: '2014-04-29T00:38:35.000000Z'
                        modified: '2014-04-29T00:38:35.000000Z'
                        approved: 1
                        approved_by: 52
                        active: true
                      organisation_group:
                        id: 2
                        organisation_id: 44
                        organisation_group_type_id: 1
                        name: 'Youth Ministry'
                        organisation_member_group_count: 243
                        created: '2014-04-08T13:57:41.000000Z'
                        modified: '2020-05-04T10:58:19.000000Z'
                        active: true
                        organisation_group_type:
                          id: 1
                          organisation_id: 44
                          name: Auxiliary
                          description: ''
                          show_on_reg_forms: 1
                          allow_multi_select: 0
                          created: '-000001-11-30T00:00:00.000000Z'
                          modified: '2016-07-12T18:24:59.000000Z'
                          active: true
      tags:
        - 'Organisation Member Groups'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: 'Organisation this record belongs to.'
                  example: 1.0
                organisation_member_id:
                  type: number
                  description: 'Membership this record belongs to.'
                  example: 1.0
                organisation_group_id:
                  type: number
                  description: 'Group this record belongs to.'
                  example: 1.0
              required:
                - organisation_id
                - organisation_member_id
                - organisation_group_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Member Groups'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/organisation_member_imports/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Imports'
  /api/organisation_member_imports/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: autem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: autem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Imports'
  /api/organisation_member_imports:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Imports'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Member Imports'
  '/api/organisation_member_imports/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Member Imports'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Member Imports'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Member Imports'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  '/api/organisations/{id}/memberships/statistics':
    get:
      summary: 'Basic Statistics'
      description: 'Returns a basic set of statistics about memberships'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation.'
        example: 12
        required: true
        schema:
          type: integer
  /api/organisation_members/unapproved:
    get:
      summary: 'Unapproved Registrations'
      description: 'Returns a list of unapproved registrations'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: modi
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: modi
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
  /api/organisation_members:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Members'
  '/api/organisation_members/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Members'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Members'
    delete:
      summary: ''
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Members'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 5
        required: true
        schema:
          type: integer
  '/api/organisation_roles/{id}/permissions':
    post:
      summary: 'Sync Permissions'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Roles'
    get:
      summary: 'Get Permissions'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation role.'
        example: neque
        required: true
        schema:
          type: string
  /api/organisation_roles/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
  /api/organisation_roles/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: debitis
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: debitis
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
  /api/organisation_roles:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Roles'
  '/api/organisation_roles/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Roles'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Roles'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Roles'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 16
        required: true
        schema:
          type: integer
  /api/organisation_setting_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
  /api/organisation_setting_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: laudantium
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: laudantium
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
  /api/organisation_setting_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Setting Types'
  '/api/organisation_setting_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Setting Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Setting Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Setting Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 4
        required: true
        schema:
          type: integer
  /api/organisation_settings/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
  /api/organisation_settings/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: non
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: non
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
  /api/organisation_settings:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Settings'
  '/api/organisation_settings/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Settings'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Settings'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Settings'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  '/api/organisation_subscriptions/{id}/renew':
    post:
      summary: "Pass the current subscription to be renewed\nPass the renewal length"
      description: "Auto determine organisation_id\nAuto determine current subscription_type\n\nActions: create an invoice for the transaction, return new subscription with invoice"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Subscrptions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 255019.12
                length:
                  type: number
                  description: ''
                  example: 31028142.2
              required:
                - organisation_id
                - length
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation subscription.'
        example: adipisci
        required: true
        schema:
          type: string
  '/api/organisation_subscriptions/{id}/upgrade':
    post:
      summary: "Pass the current subscription to be upgraded\nPass the new subscription_type to upgrade to\nPass the subscription length"
      description: "Auto determine organisation_id\n\nActions: create an invoice for the transaction, insert new subscription with invoice info"
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'Organisation Subscrptions'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_id:
                  type: number
                  description: ''
                  example: 6439.423
                subscription_type_id:
                  type: number
                  description: ''
                  example: 0.537574023
                length:
                  type: number
                  description: ''
                  example: 6.0
              required:
                - organisation_id
                - subscription_type_id
                - length
    parameters:
      -
        in: path
        name: id
        description: 'The ID of the organisation subscription.'
        example: voluptas
        required: true
        schema:
          type: string
  /api/organisation_subscriptions/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
  /api/organisation_subscriptions/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: deserunt
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: deserunt
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
  /api/organisation_subscriptions:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Subscrptions'
  '/api/organisation_subscriptions/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Subscrptions'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Subscrptions'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Subscrptions'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 4
        required: true
        schema:
          type: integer
  /api/organisation_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
  /api/organisation_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: eveniet
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: eveniet
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
  /api/organisation_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Types'
  '/api/organisation_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Organisation Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Organisation Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Organisation Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 3
        required: true
        schema:
          type: integer
  /api/organisations/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
  /api/organisations/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quae
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quae
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
  /api/organisations:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
    post:
      summary: 'Create Organisation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Organisations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: ''
                  example: 5.9765
                name:
                  type: string
                  description: ''
                  example: hic
                slug:
                  type: string
                  description: ''
                  example: corporis
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: rudolph.wintheiser@example.com
                phone:
                  type: string
                  description: ''
                  example: eos
                website:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://daniel.net/'
                country_id:
                  type: number
                  description: ''
                  example: 282.62426444
                currency_id:
                  type: number
                  description: ''
                  example: 1785015.07904
                logo:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'https://www.funk.com/sed-occaecati-eum-qui'
                address:
                  type: string
                  description: ''
                  example: consequatur
                city:
                  type: string
                  description: ''
                  example: alias
                state:
                  type: string
                  description: ''
                  example: assumenda
                post_code:
                  type: string
                  description: ''
                  example: aliquam
                short_description:
                  type: string
                  description: ''
                  example: illum
                long_description:
                  type: string
                  description: ''
                  example: maiores
                subscription_type_id:
                  type: number
                  description: ''
                  example: 43.6393
                subscription_length:
                  type: number
                  description: ''
                  example: 656.4
              required:
                - organisation_type_id
                - name
                - email
                - phone
                - country_id
                - subscription_type_id
                - subscription_length
  '/api/organisations/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Organisations
    put:
      summary: 'Update Organisation'
      description: ''
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - Organisations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                organisation_type_id:
                  type: number
                  description: ''
                  example: 3519.0
                name:
                  type: string
                  description: ''
                  example: et
                slug:
                  type: string
                  description: ''
                  example: omnis
                email:
                  type: string
                  description: 'Must be a valid email address.'
                  example: kertzmann.delpha@example.net
                phone:
                  type: string
                  description: ''
                  example: eos
                website:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://heller.info/enim-magnam-deleniti-ut-consequatur-sequi-reprehenderit'
                country_id:
                  type: number
                  description: ''
                  example: 21.9208
                currency_id:
                  type: number
                  description: ''
                  example: 834921.7
                logo:
                  type: string
                  description: 'Must be a valid URL.'
                  example: 'http://www.parisian.info/impedit-beatae-voluptatibus-veritatis-aut-ipsa-sequi-sit'
                address:
                  type: string
                  description: ''
                  example: dolorum
                city:
                  type: string
                  description: ''
                  example: temporibus
                state:
                  type: string
                  description: ''
                  example: distinctio
                post_code:
                  type: string
                  description: ''
                  example: quia
                short_description:
                  type: string
                  description: ''
                  example: expedita
                long_description:
                  type: string
                  description: ''
                  example: odit
              required:
                - organisation_type_id
                - name
                - email
                - phone
                - country_id
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Organisations
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/permissions/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
  /api/permissions/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: ducimus
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: ducimus
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
  /api/permissions:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Permissions
  '/api/permissions/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - Permissions
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - Permissions
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - Permissions
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 13
        required: true
        schema:
          type: integer
  /api/sms_account_messages/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
  /api/sms_account_messages/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: qui
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: qui
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
  /api/sms_account_messages:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
    post:
      summary: 'Send Message'
      description: 'Adds a message to the queue to dispatch to the phone number'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'SMS Account Messages'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                module_sms_account_id:
                  type: number
                  description: ''
                  example: 428895.594
                member_id:
                  type: number
                  description: ''
                  example: 0.279506
                to:
                  type: string
                  description: ''
                  example: voluptas
                message:
                  type: string
                  description: ''
                  example: aut
                sent_by:
                  type: number
                  description: ''
                  example: 21.9028994
              required:
                - module_sms_account_id
                - member_id
                - to
                - message
  '/api/sms_account_messages/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Messages'
    put:
      summary: 'Update Message'
      description: 'Updates an existing message before / after it has been sent'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses: {  }
      tags:
        - 'SMS Account Messages'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                module_sms_account_id:
                  type: number
                  description: ''
                  example: 6139.68
                member_id:
                  type: number
                  description: ''
                  example: 102598192.07
                to:
                  type: string
                  description: ''
                  example: quis
                message:
                  type: string
                  description: ''
                  example: repudiandae
                sent_by:
                  type: number
                  description: ''
                  example: 279601.986364
              required:
                - module_sms_account_id
                - member_id
                - to
                - message
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Account Messages'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 11
        required: true
        schema:
          type: integer
  /api/sms_account_topups/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
  /api/sms_account_topups/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: placeat
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: placeat
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
  /api/sms_account_topups:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Topups'
  '/api/sms_account_topups/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Account Topups'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Account Topups'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Account Topups'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 19
        required: true
        schema:
          type: integer
  /api/sms_accounts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
  /api/sms_accounts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: architecto
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: architecto
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
  /api/sms_accounts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Accounts'
  '/api/sms_accounts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Accounts'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Accounts'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Accounts'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 12
        required: true
        schema:
          type: integer
  /api/sms_broadcasts/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
  /api/sms_broadcasts/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: ex
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: ex
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
  /api/sms_broadcasts:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast'
  '/api/sms_broadcasts/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Broadcast'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 3
        required: true
        schema:
          type: integer
  /api/sms_broadcast_lists/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
  /api/sms_broadcast_lists/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quos
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quos
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
  /api/sms_broadcast_lists:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast Lists'
  '/api/sms_broadcast_lists/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Broadcast Lists'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Broadcast Lists'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Broadcast Lists'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 10
        required: true
        schema:
          type: integer
  /api/sms_credits/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
  /api/sms_credits/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: qui
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: qui
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
  /api/sms_credits:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Credits'
  '/api/sms_credits/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'SMS Credits'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'SMS Credits'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'SMS Credits'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 13
        required: true
        schema:
          type: integer
  /api/subscription_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
  /api/subscription_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: quo
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: quo
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
  /api/subscription_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Subscription Types'
  '/api/subscription_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Subscription Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Subscription Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Subscription Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 2
        required: true
        schema:
          type: integer
  /api/system_setting_category/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
  /api/system_setting_category/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: voluptatem
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: voluptatem
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
  /api/system_setting_category:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Setting Categories'
  '/api/system_setting_category/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Setting Categories'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Setting Categories'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'System Setting Categories'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 14
        required: true
        schema:
          type: integer
  /api/system_settings/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
  /api/system_settings/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: qui
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: qui
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
  /api/system_settings:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Settings'
  '/api/system_settings/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'System Settings'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'System Settings'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'System Settings'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 6
        required: true
        schema:
          type: integer
  /api/transaction_types/count:
    get:
      summary: 'Count Resources'
      description: 'Returns a simple count of data in this resource'
      parameters:
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
  /api/transaction_types/search:
    get:
      summary: 'Search Resources'
      description: "Allows searching for data in this resource using multiple options.\n\nOptions for searching\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
          example: eum
          required: false
          schema:
            type: string
            description: 'Pass any field and value to search by e.g. `name=John&email=any@aol.com`. Search logic may use LIKE or `=` depending on field'
            example: eum
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
  /api/transaction_types:
    get:
      summary: 'Get All'
      description: "Returns a list of items in this resource and allows filtering the data based on fields in the database\n\nOptions for searching / filtering\n- By field name: e.g. `?name=John` - Specific search\n- By field name with `LIKE` operator: e.g. `?name_like=John` - Fuzzy search\n- By field name with `!=` operator: e.g. `?age_not=5`\n- By field name with `>` or `<` operator: e.g. `?age_gt=5` or `?age_lt=10`\n- By field name with `>=` or `<=` operator: e.g. `?age_gte=5` or `?age_lte=10`\n- By field name with `IN` or `NOT IN` operator: e.g. `?id_in=1,3,5` or `?id_notIn=2,4`\n- By field name with `NULL` or `NOT NULL` operator: e.g. `?email_isNull` or `?email_isNotNull`"
      parameters:
        -
          in: query
          name: limit
          description: 'Total items to return e.g. `?limit=15`.'
          example: '3'
          required: false
          schema:
            type: string
            description: 'Total items to return e.g. `?limit=15`.'
            example: '3'
        -
          in: query
          name: page
          description: 'Page of items to return e.g. `?page=1`.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page of items to return e.g. `?page=1`.'
            example: 1
        -
          in: query
          name: sort
          description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
          example: latest
          required: false
          schema:
            type: string
            description: 'Sorting options e.g. `?sort=field1:asc,field2:asc` OR `?sort=latest/oldest`.'
            example: latest
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: query
          name: fieldName
          description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Pass any field and value to filter results e.g. `name=John&email=any@aol.com`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
    post:
      summary: 'Create Resource'
      description: "Create a new record of this resource in the database. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error message'
                    items:
                      type: string
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Transaction Types'
  '/api/transaction_types/{id}':
    get:
      summary: 'View Resource'
      description: "Returns information about a specific record in this resource. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        401:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  message: Unauthenticated.
                properties:
                  message:
                    type: string
                    example: Unauthenticated.
      tags:
        - 'Transaction Types'
    put:
      summary: 'Update Resource'
      description: "Updates the data of the record with the specified `id`. You can return related data or counts of related data\nin the response using the `count` and `contain` query params"
      parameters:
        -
          in: query
          name: count
          description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: integer
            description: 'Count related models. Alternatively `with_count` e.g. `?count=relation1,relation2`.'
            example: null
        -
          in: query
          name: contain
          description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
          example: null
          required: false
          schema:
            type: string
            description: 'Contain data from related model e.g. `?contain=relation1,relation2`.'
            example: null
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        400:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message:
                    - 'validation error messages'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: array
                    example:
                      - 'validation error messages'
                    items:
                      type: string
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
        500:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: error
                  message: 'Details of error message'
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: 'Details of error message'
      tags:
        - 'Transaction Types'
    delete:
      summary: 'Delete Resource'
      description: 'Deletes the record with the specified `id`'
      parameters:
        -
          in: header
          name: Authorization
          description: ''
          example: 'Bearer {token}'
          schema:
            type: string
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: X-Tenant-ID
          description: ''
          example: 5b8f3f08-2350-4e38-859e-f5b9af9ce96c
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: success
                  message: 'Resource deleted'
                  data:
                    id: 1
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: 'Resource deleted'
                  data:
                    type: object
                    example:
                      id: 1
        404:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  status: failed
                  message: 'Resource not found'
                properties:
                  status:
                    type: string
                    example: failed
                  message:
                    type: string
                    example: 'Resource not found'
      tags:
        - 'Transaction Types'
    parameters:
      -
        in: path
        name: id
        description: 'The id of the resource to view'
        example: 15
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Activity Logs'
    description: ''
  -
    name: Auth
    description: ''
  -
    name: Banks
    description: ''
  -
    name: 'Batch Requests'
    description: ''
  -
    name: 'Contribution Receipt Settings'
    description: ''
  -
    name: 'Contribution Receipts'
    description: ''
  -
    name: 'Contribution Types'
    description: ''
  -
    name: Contributions
    description: ''
  -
    name: Countries
    description: ''
  -
    name: Currencies
    description: ''
  -
    name: 'Member Accounts'
    description: ''
  -
    name: 'Member Images'
    description: ''
  -
    name: 'Member Profiles'
    description: ''
  -
    name: 'Member Relation Types'
    description: ''
  -
    name: 'Member Relations'
    description: ''
  -
    name: Notifications
    description: ''
  -
    name: 'Organisation Accounts'
    description: ''
  -
    name: 'Organisation File Imports'
    description: ''
  -
    name: 'Organisation Group Leaders'
    description: ''
  -
    name: 'Organisation Group Types'
    description: ''
  -
    name: 'Organisation Groups'
    description: ''
  -
    name: 'Organisation Invoice Items'
    description: ''
  -
    name: 'Organisation Invoice Payments'
    description: ''
  -
    name: 'Organisation Invoices'
    description: ''
  -
    name: 'Organisation Member Categories'
    description: ''
  -
    name: 'Organisation Member Groups'
    description: ''
  -
    name: 'Organisation Member Imports'
    description: ''
  -
    name: 'Organisation Members'
    description: ''
  -
    name: 'Organisation Roles'
    description: ''
  -
    name: 'Organisation Setting Types'
    description: ''
  -
    name: 'Organisation Settings'
    description: ''
  -
    name: 'Organisation Subscrptions'
    description: ''
  -
    name: 'Organisation Types'
    description: ''
  -
    name: Organisations
    description: ''
  -
    name: Permissions
    description: ''
  -
    name: 'SMS Account Messages'
    description: ''
  -
    name: 'SMS Account Topups'
    description: ''
  -
    name: 'SMS Accounts'
    description: ''
  -
    name: 'SMS Broadcast'
    description: ''
  -
    name: 'SMS Broadcast Lists'
    description: ''
  -
    name: 'SMS Credits'
    description: ''
  -
    name: 'Subscription Types'
    description: ''
  -
    name: 'System Setting Categories'
    description: ''
  -
    name: 'System Settings'
    description: ''
  -
    name: 'Transaction Types'
    description: ''
components:
  securitySchemes:
    default:
      type: http
      scheme: bearer
      description: ''
security:
  -
    default: []
